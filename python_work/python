from day 4, use python2.7 (not default pyt$hon (2.6))

make a library

$mkdir mylib
$touch mylib/__init__.py
$python2.7
>>>import mylib
$vi mylib/myfuncs.py
$python2.7
>>>import mylib
>>>import mylib/myfuncs

DICTIONARIES

unordered collection of key/value pairs.
Keys are:
-immutable (like a tuple, not like a list)
-unique
-not sorted in any order (like a set)
-no restriction on value

create by putting key:value pairs in {}
birthdays = {'Newton' : 1642, 'Darwin' : 1809}
if you only had commas, you'd be making a set

retrieve key using []
like indexing strings/lists
print birthdays['Newton']
1642

add new values by assigning to it
birthdays['Turing']= 1612 #wrong date
you can overwrite in this way as well.

keys must be present before use. otherwise, get a KeyError
test if key is present using 'in':

'Nightingale' in birthdays
False

use 'for' to loop over keys
for name in birthdays:
	print name, birthdays[name]
Turing 1612
Newton 1642
Darwin 1809
or  whatever they were...

birthdays.keys() lists all the keys
birthdays.values() does the same for values
birthdays.items() does all the pairs of keys and values

SETS AND DICTIONARIES EXERCISE PARTS 2 AND 3

band = ['mel', 'geri', 'victoria', 'mel', 'emma']
counts = {} #create empty dictionary
for name in band:
	if name not in counts:
		counts[name] = 1
	else:
		counts[name] += 1
for name in counts:
	print name, counts[name]

if {}: print 'BOOYAH' #false, no output given
d = {'maggie' : 'uk', 'ronnie' : 'usa'}
dir(d)
d.items()
d.keys()
d.values()

you get:
>>> d.items()
[('maggie', 'uk'), ('ronnie', 'usa')]
>>> d.keys()
['maggie', 'ronnie']
>>> d.values()
['uk', 'usa']

d.get('maggie', 'nowehere') # asking it to tell me the value assigned to 'maggie' key, and return 'nowhere' if the key can't be found

gives 'uk'

d.get('ringo', 'nowehere')

gives 'nowhere'

res = d.setdefault('mikhail', 'ussr')
print res, d['mikhail']

gives:
>>> res = d.setdefault('mikhail', 'ussr')
>>> print res, d['mikhail']
ussr ussr

#this course brought to you by Victor Chechik?


ERRORS

syntax error. wrong notation, commas, apostrophes in the wrong places.
code won't run, python tries to point out the location of the error

exceptions - syntax corrrect, but error during execution.
doesn't automatically stop script.
e.g. type error from '2' + 2

python tells us the type of exception error:
-zerodivisionerror
-nameerror
-typeerror
you can define your own as well

catch errors with try / except

try:
	result = runMyClimateModel(experiment)
except:
	#it failed, so do something sensible
	emailMe('no results fool')
	print "it's not a good model"

can trigger own exceptions with 'raise'

if validate(input) == false:
	raise exception('bad input provided')
	#program will stop unless exception caught
else:
	print 'great job...'

and it continues as normal

basically make except clauses so you are notified of any errors
that occur, but all cases that work fine are still processed.

DEBUGGING - we've been using 'print' ti see what's happening.
not practical for gigabytes of script.
set break points in the code.

import pdb # import  python debugger

not necessary for little scripts...
super useful for large scale work!

OBJECT-ORIENTATED PROGRAMMING (OOP)
probably a bit advance for me...

################################

NumPy - HANDLING ARRAYS IN PYTHON (only in 2.7)

array like a list except:
-all elements are the SAME TYPE
-multi-dimensional arrays more obviously supported
-array operations supported

NumPy is the standard array package in python.

Creating array:
import numpy as np
a = np.array([[2, 5, -5], [21, -2, 1]])

can have anothert input to define type:
a = np.array([[2, 5, -5], [21, -2, 1]], dtype = np.int32)
#32 bit integer

defaults to the type it sees in the list.

np.float64	double precision float
np.float32	single precision float
np.int8		byte
np.int64	long integer

zeros function:
a = np.zeros((3, 2), dtype=np.floar64)

can also use range as with lists:
a = np.arange(10)	#array range 1-10

Indexing arrays:
1 dimension

first element of a 1D array is a[0], second a[1] etc
element range separated by colon a[4:8]
can exlude 1st or 2nd element for 'everything up to/after'

2+ dimensions. Put commas in between different dimentions e.g
a[(2,3)] #for 2nd row 3rd column, or whatever

depending on what you index, you can get an integer,
or an array of fewer dimensions.

INTRODUCTION TO NumPy ARRAYS EXERCISE

import numpy as np
x = range(1, 11)
a1 = np.array(x, np.int32)
a2 = np.array(x, np.float32)
print a1.dtype #gives int32
print a2.dtype #gives float32

arr = np.zeros((2, 3, 4))
print arr
#gives
#[[[ 0.  0.  0.  0.]
# [ 0.  0.  0.  0.]
# [ 0.  0.  0.  0.]]
#
#[[ 0.  0.  0.  0.]
# [ 0.  0.  0.  0.]
# [ 0.  0.  0.  0.]]]

arr = np.ones((2, 3, 4))
print arr # as above but with '1's

arr = np.arange(1000)
print arr

a = [2, 3.2, 5.5, -6.4, -2.2, 2.4]
print a[1] #gives 3.2
print a[1:4] #gives [3.2, 5.5, -6.4]

a = np.array([[2, 3.2, 5.5, -6.4, -2.2, 2.4], [1, 22, 4, 0.1, 5.3, -9], [3, 1, 2.1, 21, 1.1, -2]])

a[:, 3] # any row, third

#gives 'array([ -6.4,   0.1,  21. ])'

a[1:4, 0:4]

#gives 'array([[  1. ,  22. ,   4. ,   0.1],
#       [  3. ,   1. ,   2.1,  21. ]])'

a[1:, 2]

#gives 'array([ 4. ,  2.1])'



INTERROGATING ARRAYS

np.shape(a)
np.ndim(a)
np.size(a) NM DON'T USE len
np.max(a)
np.min(a)

np.reshape(a, (2,3)) e.g. turning a 2by3 to a 3by2
np.transpose(a)
np.ravel(a) flatten to 1D
np.concatenate((a,b))
np.repeat(a, 3) repeats elements in a 3 times
^ what happens for non-1D arrays???

other notations available
a.shape = np.shape(a)
a.max() = np.max(a)
a.repeat(3) = np.repeat(a, 3)

a.dtype <-- interrogate data type
b = a.astype(np.int32) <-- convert data type

but some don't e.g.
a.average won't do squat

meshgrid is also a thing...

INTERROGATING AND MANIPULATING ARRAYS EXERCISE

import numpy as np
arr = np.array([range(4), range(10, 14)])
print arr.shape
print arr.size
print arr.max()
print arr.min()

arr.reshape(2, 2, 2)
arr.transpose()
arr.ravel()
print arr.astype(np.float64)

CALCULATIONS WITH ARRAYS

multiply together, element by element

make two arrays a and b i.e. a = np.array([vsfdv], [vasdfa])
product_ab = np.zeros(shape_a, dtype=np.float32)
can loop over product of two elements andput to a new array.

must use xrange to make a list of indices
(like range, but only provides one element at a time)

simple way:
product_ab = a  * b
c = a + b

these do ELEMENT BY ELEMENT

booleans of arrays will give an array of true/false
e.g for if you asked if the elements were >3

ARRAY CALCULATIONS AND OPERATIONS EXERCISE

import numpy as np
a = np.array([range(4), range(10,14)])
b = np.array([2, -1, 1, 0])
print a*b
b1 = b*100
b2 = b*100.0
print b1
print b2
b1 == b2 # gives 4x1 array of True
print b1.dtype, b2.dtype # get int64 and float64
arr = np.arange(10)
print arr < 3
print np.less(arr, 3) # does same as line above
#both above give [ True  True  True False False False False False False False]
condition = np.logical_or(arr < 3, arr > 8)
new_arr = np.where(condition, arr * 5, arr * -5)
print new_arr #gives [  0,   5,  10, -15, -20, -25, -30, -35, -40,  45]
def calcMagnitude(u, v, minmag = 0.1):
	mag = ((u**2) + (v**2))**0.5
	output = np.where(mag > minmag, mag, minmag)
	return output
u = np.array([[4, 5, 6], [2, 3, 4]])
v = np.array([[2, 2, 2], [1, 1, 1]])
print calcMagnitude(u, v)
#get [[ 4.47213595  5.38516481  6.32455532]
#    [ 2.23606798  3.16227766  4.12310563]]
u = np.array([[4, 5, 0.01], [2, 3, 4]])
v = np.array([[2, 2, 0.03], [1, 1, 1]])
print calcMagnitude(u, v)
#get [[ 4.47213595  5.38516481  0.1      ]
#    [ 2.23606798  3.16227766  4.12310563]]
#note the 3rd value = 0.1, minimum in effect

HANDLING MISSING VALUES

e.g. ocean data, certain point are land therefore no valid data
masked array includes a mask of bad values that travels with the array
like an overlay that tells python which values should be omitted

import numpy.ma as MA
import numpy as np

a = MA.masked_array(data = [1, 2, 3], mask = [True, True, False])
True = mask the data i.e above gives [-- -- 3]

you can do operations to the masked array normally
b+c masks any outputs where either input is masked

FILL VALUES

writing data to a file, you want an unmasked array,
but with zeros, for example

e.g save writing a full data array and a mask to go with it.
fill value should be outside the data range.

can specify fill value as a third argument in:
MA.masked_array(arg1, arg2, HERE)

MISSING VALUES EXERCISE

import numpy.ma as MA
marr = MA.masked_array(range(10), fill_value = -999)
print marr,  marr.fill_value
marr[2] = MA.masked # mask the 3nd value in marr
print marr
#gives [0 1 -- 3 4 5 6 7 8 9]
print marr.mask #prints the mask applied to marr
#get [False False  True False False False False False False False]
narr = MA.masked_where(marr>6, marr)
print narr
#gives [0 1 -- 3 4 5 6 -- -- --]
print narr.fill_value # gives -999
x = MA.filled(narr)
print x
#gives [   0    1 -999    3    4    5    6 -999 -999 -999]
print type(x) #gives 'numpy.ndarray'
m1 = MA.masked_array(range(1,9))
print m1
m2 = m1.reshape(2,4)
print m2
m3 = MA.masked_greater(m2, 6)
print m3
print m3*100
res = m3 - np.ones((2, 4))
print res
#gives [[0.0 1.0 2.0 3.0]
#      [4.0 5.0 -- --]]
type(res) #gives <class 'numpy.ma.core.MaskedArray'>


